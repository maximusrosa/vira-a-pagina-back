// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BookCondition {
  LIKE_NEW
  GOOD
  ACCEPTABLE
}

enum BookStatus {
  AVAILABLE
  TRADED
}

enum ExchangeStatus {
  REQUESTED
  ACCEPTED
  COMPLETED
  CANCELED
}

enum UserRole {
  USER_MODERATOR
  MODERATOR
  STUDENT
}

model User {
  id               Int        @id @default(autoincrement())
  name             String
  email            String     @unique
  password         String
  role             UserRole   @default(STUDENT)
  createdAt        DateTime   @default(now())
  
  // Relation for role-specific profile
  studentInfo      Student?
  moderatorInfo    Moderator?
}

model Moderator {
  id               Int        @id @default(autoincrement())
  user             User       @relation(fields: [userId], references: [id])
  userId           Int        @unique
  authorizedExchanges Exchange[] @relation("AuthorizedExchanges")
  authorizedBooks   Book[]     @relation("AuthorizedBooks")
}

model Student {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int      @unique
  uniCard         String  @unique
  course           String
  contact          String
  rating           Float?   
  booksOwned       Book[]     @relation("UserBooks")
  providedExchanges Exchange[] @relation("ProviderExchanges")
  requestedExchanges Exchange[] @relation("RequesterExchanges")
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Book {
  id               Int        @id @default(autoincrement())
  title            String
  author           String
  year             Int
  discipline       String
  condition        BookCondition
  description      String?
  //images           String[]   // URLs to images
  status           BookStatus
  owner            Student    @relation("UserBooks", fields: [ownerId], references: [id])
  ownerId          Int
  exchanges        Exchange[]
  authorizer       Moderator  @relation("AuthorizedBooks", fields: [authorizerId], references: [id])
  authorizerId     Int
  createdAt        DateTime   @default(now())
}

model Exchange {
  id               Int       @id @default(autoincrement())
  book             Book      @relation(fields: [bookId], references: [id])
  bookId           Int
  provider         Student   @relation("ProviderExchanges", fields: [providerId], references: [id])
  providerId       Int
  requester        Student   @relation("RequesterExchanges", fields: [requesterId], references: [id])
  requesterId      Int
  authorizer       Moderator @relation("AuthorizedExchanges", fields: [authorizerId], references: [id])
  authorizerId     Int
  status           ExchangeStatus
  requestDate      DateTime  @default(now())
  completionDate   DateTime?
}

model Message {
  id               Int       @id @default(autoincrement())
  sender           Student   @relation("SentMessages", fields: [senderId], references: [id])
  senderId         Int
  receiver         Student   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId       Int
  content          String
  timestamp        DateTime  @default(now())
}